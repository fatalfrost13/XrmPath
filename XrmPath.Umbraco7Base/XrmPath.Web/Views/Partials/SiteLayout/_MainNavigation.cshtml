@inherits UmbracoViewPage
@using XrmPath.Web.Models
@using XrmPath.Web.Helpers.UmbracoHelpers

@{
    IPublishedContent homePage = Umbraco.AssignedContentItem.AncestorOrSelf(UmbracoCustomTypes.HomePage);
    IEnumerable<IPublishedContent> navigationPages = homePage.Children(x => x.IsVisible());
}

<nav class="navbar navbar-default navbar-fixed-top navigation-clean">
    <div class="container">
        <div class="navbar-header">
            <a class="navbar-brand" href="/">Demo Home</a>
            <button class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navcol-1"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>
        </div>
        <div class="collapse navbar-collapse" id="navcol-1">
            @if (navigationPages != null && navigationPages.Count() > 0)
            {
                <ul class="nav navbar-nav navbar-right">
                    @RenderChildren(navigationPages)
                </ul>
            }
        </div>
    </div>
</nav>

@helper RenderChildren(IEnumerable<IPublishedContent> navigationPages)
{
    foreach (IPublishedContent item in navigationPages)
    {
        @RenderPageLink(item)
    }
}


@helper RenderPageLink(IPublishedContent item)
{
    bool isActive = Umbraco.AssignedContentItem.Id == item.Id;

    if (!item.GetPropertyValue<bool>("disableDropdown") && item.Children != null && item.Children.Where(x => x.IsVisible()).Any())
    {
        IEnumerable<IPublishedContent> childItems = item.Children.Where(x => x.IsVisible());
        bool textOnly = item.GetNodeBoolean("textOnlyInNavigation");
        <li class="dropdown">
            <a class="dropdown-toggle @(textOnly ? "textonly" : null) @(isActive ? "active" : null)" data-toggle="dropdown" aria-expanded="false" target="@item.GetTarget()" href="@item.GetUrl()">@item.GetTitle() <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
                @RenderChildren(childItems)
            </ul>
        </li>
    }
    else
    {
        <li role="presentation" class="@(isActive ? "active" : null)">
            <a href="@item.GetUrl()" target="@item.GetTarget()">@item.GetTitle()</a>
        </li>
    }
}