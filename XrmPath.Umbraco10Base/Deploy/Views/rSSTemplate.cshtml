@inherits UmbracoViewPage
@using System.Xml
@using XrmPath.UmbracoCore.Utilities
@{
    Layout = null;
}

@{

    //parameters
    var documentType = Model.GetContentValue("documentType");
    if (string.IsNullOrEmpty(documentType))
    {
        documentType = "article";
    }
    var objBlogRoot = Model.GetContentPicker("contentPicker");
    if (objBlogRoot == null)
    {
        objBlogRoot = QueryUtility.GetPageByUniqueId("blogRoot");
    }

    //fieldname mappings
    var titleField = Model.GetContentValue("titleMapping");
    if (string.IsNullOrEmpty(titleField))
    {
        titleField = "title";
    }
    var descriptionField = Model.GetContentValue("descriptionMapping");
    if (string.IsNullOrEmpty(descriptionField))
    {
        descriptionField = "description";
    }

    var dateField = Model.GetContentValue("dateMapping");
    if (string.IsNullOrEmpty(dateField))
    {
        dateField = "date";
    }
    var authorField = Model.GetContentValue("authorMapping");

    // Get posts
    var colPosts = objBlogRoot.Descendants(documentType).ToList();
    if (!string.IsNullOrEmpty(dateField))
    {
        //colPosts = colPosts.OrderBy(dateField + " desc").ToList();
        //colPosts = colPosts.OrderBy(dateField + " desc").ToList();
        colPosts = colPosts.OrderByDescending(i => i.GetDate(dateField)).ToList();
    }
    else
    {
        colPosts = colPosts.OrderByDescending(i => i.CreateDate).ToList();
    }

    // Get the latest post date
    DateTime dtmPostDate = colPosts.Count() == 0 ? DateTime.Now : colPosts.FirstOrDefault().GetDateTime(dateField);

    // Clear any current response
    Response.Clear();
    // Set new response type to rss
    Response.ContentType = "text/xml";

    // Create the feedwriter and start document
    XmlTextWriter objFeedWriter = new XmlTextWriter(Response.OutputStream, System.Text.Encoding.UTF8);

    objFeedWriter.WriteStartDocument();

    // Set up/declare the rss content
    objFeedWriter.WriteStartElement("rss");
    objFeedWriter.WriteAttributeString("version", "2.0");

    // Output the channel information
    objFeedWriter.WriteStartElement("channel");
    objFeedWriter.WriteElementString("title", Model.GetTitle());
    objFeedWriter.WriteElementString("description", Model.GetContentValue("description"));
    objFeedWriter.WriteElementString("copyright", Model.GetContentValue("copyright"));
    objFeedWriter.WriteElementString("image", Model.GetContentValue("image"));
    //objFeedWriter.WriteElementString("link", Umbraco.NiceUrlWithDomain(objBlogRoot.Id));
    objFeedWriter.WriteElementString("link", objBlogRoot.GetFullUrl());
    objFeedWriter.WriteElementString("lastBuildDate", dtmPostDate.ToString("ddd, dd MMMM yyyy HH:mm:ss"));
    objFeedWriter.WriteElementString("pubDate", dtmPostDate.ToString("ddd, dd MMMM yyyy HH:mm:ss"));

    // Output the posts information
    foreach (IPublishedContent objPost in colPosts)
    {
        objFeedWriter.WriteStartElement("item");
        objFeedWriter.WriteElementString("title", objPost.GetContentValue(titleField));

        if (!string.IsNullOrEmpty(authorField) && !string.IsNullOrEmpty(Model.GetContentValue(authorField)))
        {
            objFeedWriter.WriteElementString("author", objPost.GetContentValue(authorField));
        }

        //objFeedWriter.WriteElementString("comments", Umbraco.NiceUrlWithDomain(objPost.Id));
        objFeedWriter.WriteElementString("comments", objPost.GetFullUrl());
        objFeedWriter.WriteElementString("description", objPost.GetContentValue(descriptionField));
        objFeedWriter.WriteElementString("link", objPost.GetFullUrl());
        objFeedWriter.WriteElementString("guid", objPost.GetFullUrl());
        objFeedWriter.WriteElementString("pubDate", objPost.GetDateTime(dateField).ToString("ddd, dd MMMM yyyy HH:mm:ss"));
        objFeedWriter.WriteEndElement();
    }

    // Finnish and end the rss feed
    objFeedWriter.WriteEndElement();
    objFeedWriter.WriteEndElement();
    objFeedWriter.WriteEndDocument();
    objFeedWriter.Flush();
    objFeedWriter.Close();

    // Finish the response
    Response.End();
}
